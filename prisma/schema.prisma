// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id         String   @id @default(cuid())
  kakaoId    String   @unique
  email      String?  @unique
  name       String?
  nickname   String?
  profileUrl String?
  role       Role     @default(USER)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  sessions  Session[]
  wishlists Wishlist[]

  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Category {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Product[]

  @@map("categories")
}

model Product {
  id            String         @id @default(cuid())
  name          String
  price         Int
  currency      String
  count         Int            @default(0)
  categoryId    String?
  category      Category?      @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  ProductDetail ProductDetail?
  ProductImage  ProductImage[]
  wishlists     Wishlist[]

  @@map("products")
}

model ProductDetail {
  id        String   @id @default(cuid())
  productId String   @unique
  detail    String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("product_details")
}

model ProductImage {
  id        String   @id @default(cuid())
  productId String
  imageKey  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model Wishlist {
  userId    String
  productId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([userId, productId])
  @@map("wishlists")
}

model WithdrawalHistory {
  id        String   @id @default(cuid())
  type      String
  comment   String?
  createdAt DateTime @default(now())

  @@map("withdrawal_histories")
}
